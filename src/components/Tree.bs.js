// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Group from "@visx/group";
import * as Shape from "@visx/shape";
import * as Gradient from "@visx/gradient";
import * as Hierarchy from "@visx/hierarchy";
import * as JsxRuntime from "react/jsx-runtime";

var $$Window = {};

var Group$1 = {};

function hex(name) {
  if (name === "white") {
    return "#ffffff";
  } else if (name === "pink") {
    return "#fe6e9e";
  } else if (name === "plum") {
    return "#71248e";
  } else if (name === "blueGray") {
    return "#272b4d";
  } else if (name === "green") {
    return "#26deb0";
  } else if (name === "lightpurple") {
    return "#374469";
  } else if (name === "background") {
    return "#ffffff";
  } else if (name === "peach") {
    return "#fd9b93";
  } else {
    return "#03c0dc";
  }
}

var Colors = {
  hex: hex
};

var LinearGradient = {};

var D3 = {};

var rawTree_children = [
  {
    name: "Peripheral 1",
    children: [
      {
        name: "A1"
      },
      {
        name: "A2"
      },
      {
        name: "A3"
      },
      {
        name: "C",
        children: [
          {
            name: "C1"
          },
          {
            name: "D",
            children: [
              {
                name: "D1"
              },
              {
                name: "D2"
              },
              {
                name: "D3"
              }
            ]
          }
        ]
      }
    ]
  },
  {
    name: "Z"
  },
  {
    name: "Peripheral 2",
    children: [
      {
        name: "B1"
      },
      {
        name: "B2"
      },
      {
        name: "B3"
      }
    ]
  }
];

var rawTree = {
  name: "Population",
  children: rawTree_children
};

var Tree = {};

var LinkHorizontal = {};

function Tree$RootNode(props) {
  var node = props.node;
  return JsxRuntime.jsxs(Group.Group, {
              top: node.x,
              left: node.y,
              children: [
                JsxRuntime.jsx("circle", {
                      fill: "url('#lg')",
                      r: "33"
                    }),
                JsxRuntime.jsx("text", {
                      children: node.data.name,
                      style: {
                        pointerEvents: "none"
                      },
                      dy: ".33em",
                      fill: hex("plum"),
                      fontFamily: "Arial",
                      fontSize: "9",
                      textAnchor: "middle"
                    })
              ]
            });
}

var RootNode = {
  make: Tree$RootNode
};

function Tree$ParentNode(props) {
  var node = props.node;
  return JsxRuntime.jsxs(Group.Group, {
              top: node.x,
              left: node.y,
              children: [
                JsxRuntime.jsx("rect", {
                      height: props.height,
                      width: props.width,
                      onClick: (function (param) {
                          window.alert("clicked: " + node.data.name + "");
                        }),
                      fill: hex("background"),
                      rx: "5",
                      stroke: hex("blue"),
                      strokeWidth: "1",
                      x: props.x,
                      y: props.y
                    }),
                JsxRuntime.jsx("text", {
                      children: node.data.name,
                      style: {
                        pointerEvents: "none"
                      },
                      dy: ".33em",
                      fill: hex("blueGray"),
                      fontFamily: "Arial",
                      fontSize: "9",
                      textAnchor: "middle"
                    })
              ]
            });
}

var ParentNode = {
  make: Tree$ParentNode
};

function Tree$LeafNode(props) {
  var node = props.node;
  return JsxRuntime.jsxs(Group.Group, {
              top: node.x,
              left: node.y,
              children: [
                JsxRuntime.jsx("rect", {
                      height: props.height,
                      width: props.width,
                      onClick: (function (param) {
                          window.alert("clicked: " + node.data.name + "");
                        }),
                      fill: hex("background"),
                      rx: "10",
                      stroke: hex("blue"),
                      strokeDasharray: "2,2",
                      strokeOpacity: "0.6",
                      strokeWidth: "1",
                      x: props.x,
                      y: props.y
                    }),
                JsxRuntime.jsx("text", {
                      children: node.data.name,
                      style: {
                        pointerEvents: "none"
                      },
                      dy: ".33em",
                      fill: hex("green"),
                      fontFamily: "Arial",
                      fontSize: "9",
                      textAnchor: "middle"
                    })
              ]
            });
}

var LeafNode = {
  make: Tree$LeafNode
};

var x = (- (80.0 / 2.0)).toString();

var y = (- (30.0 / 2.0)).toString();

var width = (80.0).toString();

var height = (30.0).toString();

function Tree$Node(props) {
  var node = props.node;
  if (node.depth === 0) {
    return JsxRuntime.jsx(Tree$RootNode, {
                node: node
              });
  }
  var _children = node.data.children;
  if (_children !== undefined) {
    return JsxRuntime.jsx(Tree$ParentNode, {
                node: node,
                height: height,
                width: width,
                x: x,
                y: y
              });
  } else {
    return JsxRuntime.jsx(Tree$LeafNode, {
                node: node,
                height: height,
                width: width,
                x: x,
                y: y
              });
  }
}

var $$Node = {
  widthRaw: 80.0,
  heightRaw: 30.0,
  x: x,
  y: y,
  width: width,
  height: height,
  make: Tree$Node
};

var $$default = {
  top: 10,
  left: 80,
  right: 80,
  bottom: 10
};

var Margin = {
  $$default: $$default
};

var data = Hierarchy.hierarchy(rawTree);

function Tree$Example(props) {
  var margin = props.margin;
  var height = props.height;
  var width = props.width;
  var margin$1 = margin !== undefined ? margin : $$default;
  var yMax = (height - margin$1.top | 0) - margin$1.bottom | 0;
  var xMax = (width - margin$1.left | 0) - margin$1.right | 0;
  var height$1 = height.toString();
  var width$1 = width.toString();
  return JsxRuntime.jsxs("svg", {
              children: [
                JsxRuntime.jsx(Gradient.LinearGradient, {
                      id: "lg",
                      from: hex("peach"),
                      to: hex("pink")
                    }),
                JsxRuntime.jsx(Hierarchy.Tree, {
                      root: data,
                      size: [
                        yMax,
                        xMax
                      ],
                      children: (function (tree) {
                          return JsxRuntime.jsxs(Group.Group, {
                                      top: margin$1.top,
                                      left: margin$1.left,
                                      children: [
                                        tree.links().map(function (link, i) {
                                              return JsxRuntime.jsx(Shape.LinkHorizontal, {
                                                          data: link,
                                                          stroke: hex("lightpurple"),
                                                          strokeWidth: "1",
                                                          fill: "none"
                                                        }, "link" + i.toString() + "");
                                            }),
                                        tree.descendants().map(function (node, i) {
                                              return JsxRuntime.jsx(Tree$Node, {
                                                          node: node
                                                        }, "link" + i.toString() + "");
                                            })
                                      ]
                                    });
                        })
                    })
              ],
              height: height$1,
              width: width$1
            });
}

var Example = {
  data: data,
  make: Tree$Example
};

export {
  $$Window ,
  Group$1 as Group,
  Colors ,
  LinearGradient ,
  D3 ,
  rawTree ,
  Tree ,
  LinkHorizontal ,
  RootNode ,
  ParentNode ,
  LeafNode ,
  $$Node ,
  Margin ,
  Example ,
}
/* x Not a pure module */
