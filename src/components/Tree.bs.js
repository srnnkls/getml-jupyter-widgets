// Generated by ReScript, PLEASE EDIT WITH CARE

import * as Visx from "../bindings/Visx.bs.js";
import * as Curry from "rescript/lib/es6/curry.js";
import * as React from "react";
import * as Caml_obj from "rescript/lib/es6/caml_obj.js";
import * as D3Shape from "d3-shape";
import * as $$Event from "@visx/event";
import * as Group from "@visx/group";
import * as Shape from "@visx/shape";
import * as Caml_option from "rescript/lib/es6/caml_option.js";
import * as Tooltip from "@visx/tooltip";
import * as Gradient from "@visx/gradient";
import * as Hierarchy from "@visx/hierarchy";
import * as JsxRuntime from "react/jsx-runtime";

var $$Window = {};

var $$Math = {};

function hex(name) {
  if (name === "white") {
    return "#ffffff";
  } else if (name === "pink") {
    return "#fe6e9e";
  } else if (name === "plum") {
    return "#71248e";
  } else if (name === "strawberry") {
    return "#ff9191";
  } else if (name === "blueGray") {
    return "#272b4d";
  } else if (name === "green") {
    return "#26deb0";
  } else if (name === "lightpurple") {
    return "#374469";
  } else if (name === "background") {
    return "#ffffff";
  } else if (name === "peach") {
    return "#d54c4c";
  } else {
    return "#03c0dc";
  }
}

var Colors = {
  hex: hex
};

function Tree$PopulationNode(props) {
  var node = props.node;
  var match = D3Shape.pointRadial(node.x, node.y);
  var top = match[1] + 25.0;
  return JsxRuntime.jsxs(Group.Group, {
              top: top,
              left: match[0],
              children: [
                JsxRuntime.jsx("circle", {
                      fill: "url('#population-gradient')",
                      r: "30"
                    }),
                JsxRuntime.jsx("text", {
                      children: node.data.name,
                      style: {
                        pointerEvents: "none"
                      },
                      dy: ".33em",
                      fill: hex("white"),
                      fontFamily: "Arial",
                      fontSize: "9",
                      textAnchor: "middle"
                    })
              ]
            });
}

var PopulationNode = {
  make: Tree$PopulationNode
};

function Tree$PeripheralNode(props) {
  var node = props.node;
  var match = D3Shape.pointRadial(node.x, node.y);
  return JsxRuntime.jsxs(Group.Group, {
              top: match[1],
              left: match[0],
              children: [
                JsxRuntime.jsx("rect", {
                      height: props.height,
                      width: props.width,
                      onClick: (function (param) {
                          window.alert("clicked: " + node.data.name + "");
                        }),
                      fill: hex("background"),
                      rx: "12",
                      stroke: hex("peach"),
                      strokeWidth: "1",
                      x: props.x,
                      y: props.y
                    }),
                JsxRuntime.jsx("text", {
                      children: node.data.name,
                      style: {
                        pointerEvents: "none"
                      },
                      dy: ".33em",
                      fill: hex("blueGray"),
                      fontFamily: "Arial",
                      fontSize: "9",
                      textAnchor: "middle"
                    })
              ]
            });
}

var PeripheralNode = {
  make: Tree$PeripheralNode
};

var x = (- (45.0 / 2.0)).toString();

var y = (- (25.0 / 2.0)).toString();

var width = (45.0).toString();

var height = (25.0).toString();

function Tree$Node(props) {
  var node = props.node;
  if (node.depth === 0) {
    return JsxRuntime.jsx(Tree$PopulationNode, {
                node: node
              });
  } else {
    return JsxRuntime.jsx(Tree$PeripheralNode, {
                node: node,
                height: height,
                width: width,
                x: x,
                y: y
              });
  }
}

var $$Node = {
  widthRaw: 45.0,
  heightRaw: 25.0,
  x: x,
  y: y,
  width: width,
  height: height,
  make: Tree$Node
};

var $$default = {
  top: 0,
  left: 0,
  right: 0,
  bottom: 0
};

var Margin = {
  $$default: $$default
};

function Tree(props) {
  var margin = props.margin;
  var height = props.height;
  var width = props.width;
  var margin$1 = margin !== undefined ? margin : $$default;
  var data = Hierarchy.hierarchy(props.data);
  var innerHeight = (height - margin$1.top | 0) - margin$1.bottom | 0;
  var innerWidth = (width - margin$1.left | 0) - margin$1.right | 0;
  var origin_x = innerWidth / 2.0;
  var origin_y = innerHeight / 2.0;
  var sizeWidth = 2.0 * Math.PI;
  var sizeHeight = Math.min(innerWidth, innerHeight) / 2.0;
  var height$1 = height.toString();
  var width$1 = width.toString();
  var match = Tooltip.useTooltip();
  var tooltipData = match.tooltipData;
  var showTooltip = match.showTooltip;
  var hideTooltip = match.hideTooltip;
  var match$1 = React.useState(function () {
        
      });
  var setTooltipTimeout = match$1[1];
  var tooltipTimeout = match$1[0];
  var tmp;
  if (match.tooltipOpen) {
    var parent = tooltipData.source;
    var child = tooltipData.target;
    var join = child.data.on;
    tmp = JsxRuntime.jsxs(Tooltip.Tooltip, {
          left: match.tooltipLeft,
          top: match.tooltipTop,
          style: Visx.Tooltip.styles,
          children: [
            JsxRuntime.jsx("div", {
                  children: "" + parent.data.name + " â†’ " + child.data.name + "",
                  className: "mb-3 text-[11px]"
                }),
            JsxRuntime.jsx("div", {
                  children: join !== undefined ? "on: " + join + "" : null,
                  className: "text-[10px]"
                })
          ]
        });
  } else {
    tmp = null;
  }
  return JsxRuntime.jsxs("div", {
              children: [
                JsxRuntime.jsxs("svg", {
                      children: [
                        JsxRuntime.jsx(Gradient.LinearGradient, {
                              id: "population-gradient",
                              from: hex("peach"),
                              to: hex("plum")
                            }),
                        JsxRuntime.jsx(Hierarchy.Tree, {
                              root: data,
                              size: [
                                sizeWidth,
                                sizeHeight
                              ],
                              separation: (function (a, b) {
                                  return (
                                          Caml_obj.equal(a.parent, b.parent) ? 1.0 : 2.0
                                        ) / a.depth;
                                }),
                              children: (function (tree) {
                                  return JsxRuntime.jsxs(Group.Group, {
                                              top: origin_y,
                                              left: origin_x,
                                              children: [
                                                tree.links().map(function (link, i) {
                                                      var key = i.toString();
                                                      return JsxRuntime.jsxs(Group.Group, {
                                                                  top: link.y,
                                                                  left: link.x,
                                                                  children: [
                                                                    JsxRuntime.jsx(Shape.LinkRadial, {
                                                                          data: link,
                                                                          stroke: hex("lightpurple"),
                                                                          strokeWidth: "1",
                                                                          fill: "none"
                                                                        }),
                                                                    JsxRuntime.jsx(Shape.LinkRadial, {
                                                                          data: link,
                                                                          stroke: "transparent",
                                                                          strokeWidth: "10",
                                                                          fill: "none",
                                                                          onMouseLeave: (function (param) {
                                                                              Curry._1(setTooltipTimeout, (function (param) {
                                                                                      return Caml_option.some(setTimeout((function (param) {
                                                                                                        Curry._1(hideTooltip, undefined);
                                                                                                      }), 300));
                                                                                    }));
                                                                            }),
                                                                          onMouseMove: (function ($$event) {
                                                                              if (tooltipTimeout !== undefined) {
                                                                                clearTimeout(Caml_option.valFromOption(tooltipTimeout));
                                                                              }
                                                                              var eventSvgCoords = $$Event.localPoint($$event);
                                                                              Curry._1(showTooltip, {
                                                                                    tooltipLeft: eventSvgCoords.x,
                                                                                    tooltipTop: eventSvgCoords.y,
                                                                                    tooltipData: link
                                                                                  });
                                                                            })
                                                                        })
                                                                  ]
                                                                }, key);
                                                    }),
                                                tree.descendants().map(function (node, i) {
                                                      var key = i.toString();
                                                      return JsxRuntime.jsx(Tree$Node, {
                                                                  node: node
                                                                }, key);
                                                    })
                                              ]
                                            });
                                })
                            })
                      ],
                      height: height$1,
                      width: width$1
                    }),
                tmp
              ],
              className: ""
            });
}

var make = Tree;

export {
  $$Window ,
  $$Math ,
  Colors ,
  PopulationNode ,
  PeripheralNode ,
  $$Node ,
  Margin ,
  make ,
}
/* x Not a pure module */
